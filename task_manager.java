import java.util.ArrayList;
import java.util.Scanner;

class Task {
    private String description;
    private boolean isCompleted;
    private int id;
    
    public Task(String description, int id) {
        this.description = description;
        this.isCompleted = false;
        this.id = id;
    }
    
    // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
    public String getDescription() {
        return description;
    }
    
    public boolean isCompleted() {
        return isCompleted;
    }
    
    public void setCompleted(boolean completed) {
        isCompleted = completed;
    }
    
    public int getId() {
        return id;
    }
    
    @Override
    public String toString() {
        String status = isCompleted ? "‚úì" : "‚úó";
        return String.format("[%d] %s %s", id, status, description);
    }
}

public class TaskManager {
    private ArrayList<Task> tasks;
    private Scanner scanner;
    private int nextId;
    
    public TaskManager() {
        tasks = new ArrayList<>();
        scanner = new Scanner(System.in);
        nextId = 1;
    }
    
    public void run() {
        System.out.println("=== üìã –ú–ï–ù–ï–î–ñ–ï–† –ó–ê–î–ê–ß ===");
        System.out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!");
        
        while (true) {
            showMenu();
            int choice = getChoice();
            
            switch (choice) {
                case 1:
                    addTask();
                    break;
                case 2:
                    showTasks();
                    break;
                case 3:
                    completeTask();
                    break;
                case 4:
                    deleteTask();
                    break;
                case 5:
                    showStatistics();
                    break;
                case 6:
                    System.out.println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã");
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
            
            System.out.println(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        }
    }
    
    private void showMenu() {
        System.out.println("\n--- –ú–ï–ù–Æ ---");
        System.out.println("1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É");
        System.out.println("2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏");
        System.out.println("3. ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π");
        System.out.println("4. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É");
        System.out.println("5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        System.out.println("6. üö™ –í—ã—Ö–æ–¥");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ");
    }
    
    private int getChoice() {
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥
        }
    }
    
    private void addTask() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ");
        String description = scanner.nextLine().trim();
        
        if (description.isEmpty()) {
            System.out.println("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
            return;
        }
        
        Task task = new Task(description, nextId++);
        tasks.add(task);
        System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + task);
    }
    
    private void showTasks() {
        if (tasks.isEmpty()) {
            System.out.println("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!");
            return;
        }
        
        System.out.println("\n=== –í–ê–®–ò –ó–ê–î–ê–ß–ò ===");
        for (Task task : tasks) {
            System.out.println(task);
        }
    }
    
    private void completeTask() {
        if (tasks.isEmpty()) {
            System.out.println("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.");
            return;
        }
        
        showTasks();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ");
        
        try {
            int id = Integer.parseInt(scanner.nextLine());
            Task task = findTaskById(id);
            
            if (task == null) {
                System.out.println("‚ùå –ó–∞–¥–∞—á–∞ —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                return;
            }
            
            if (task.isCompleted()) {
                System.out.println("‚ÑπÔ∏è  –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!");
            } else {
                task.setCompleted(true);
                System.out.println("üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: " + task.getDescription());
            }
            
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä ID.");
        }
    }
    
    private void deleteTask() {
        if (tasks.isEmpty()) {
            System.out.println("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
            return;
        }
        
        showTasks();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        
        try {
            int id = Integer.parseInt(scanner.nextLine());
            Task task = findTaskById(id);
            
            if (task == null) {
                System.out.println("‚ùå –ó–∞–¥–∞—á–∞ —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                return;
            }
            
            tasks.remove(task);
            System.out.println("üóëÔ∏è  –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: " + task.getDescription());
            
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä ID.");
        }
    }
    
    private void showStatistics() {
        if (tasks.isEmpty()) {
            System.out.println("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.");
            return;
        }
        
        int total = tasks.size();
        int completed = 0;
        
        for (Task task : tasks) {
            if (task.isCompleted()) {
                completed++;
            }
        }
        
        int pending = total - completed;
        double completionRate = (double) completed / total * 100;
        
        System.out.println("\n=== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
        System.out.println("üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: " + total);
        System.out.println("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + completed);
        System.out.println("‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: " + pending);
        System.out.printf("üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %.1f%%\n", completionRate);
        
        if (completionRate == 100) {
            System.out.println("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!");
        }
    }
    
    private Task findTaskById(int id) {
        for (Task task : tasks) {
            if (task.getId() == id) {
                return task;
            }
        }
        return null;
    }
    
    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        manager.run();
    }
}
